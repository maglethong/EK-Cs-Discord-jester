name: CD

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        
    # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-22.04  

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Build the Docker image
      run: >
        docker build 
        --file Dockerfile 
        --tag maglethong/ek/discord/jester:${{ github.sha }}
        .

    - name: Export docker image
      run: >
        docker image save 
        --output ./DockerImage.tar
        maglethong/ek/discord/jester:${{ github.sha }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}

      # TODO Get $storageAccountName/$storageContainerName from Vault and save link to vault as Github Variable 
      #      so we Decouple things a bit and make it easier to re-use the whole code 
      # TODO Put code in a .ps1 file since it's getting kinda hard to read it here
    - name: Upload image to Azure storage account
      shell: pwsh
      run: |
        $imageFile = "./DockerImage.tar"
        $storageAccountName = "dtekdiscterraformsa"
        $storageContainerName = "publicreleases"
        $targetFileName = "./DockerImage-${{ github.sha }}.tar"
        $subscription = ((az account list | ConvertFrom-Json) | WHERE isDefault -eq $true).id
        $tenant = ((az account list | ConvertFrom-Json) | WHERE isDefault -eq $true).tenantId
        Write-Host Uploading release to $targetFileName
        az storage blob upload --file $imageFile --name $targetFileName --account-name $storageAccountName --container-name $storageContainerName --auth-mode login --timeout 300
        $existingReleasesRaw = az storage blob list --account-name $storageAccountName --container-name $storageContainerName --auth-mode login --timeout 300
        $toDeleteList = ($existingReleasesRaw | ConvertFrom-Json | Sort-Object $_.properties.lastModified) | Select-Object -Skip 3 -Property name
        foreach ($fileToDelete in $toDeleteList) {
          Write-Host Deleting old release file: $fileToDelete.Name
          az storage blob delete --name $fileToDelete.Name --account-name $storageAccountName --container-name $storageContainerName --auth-mode login --timeout 300
        }
        
# TODO -> This fails to connect. possibly missing permissions for the service principal?
    - name: Connect to Azure Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "dev-kv-ek-discord"
        secrets: 'Discord__Token, Notion__Token'
      id: myGetSecretAction
      
#  https://learn:
#    microsoft:
#      com/en-us/azure/virtual-machines/linux/run-command-managed:
#  $PublicParametersArray = @([Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20210701.IRunCommandInputParameter]@{name='publicParam1';value='publicParam1value'},
#  >> [Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20210701.IRunCommandInputParameter]@{name='publicParam2';value='publicParam2value'})
#  
#  $ProtectedParametersArray = @([Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20210701.IRunCommandInputParameter]@{name='secret1';value='secret1value'},
#  >> [Microsoft.Azure.PowerShell.Cmdlets.Compute.Models.Api20210701.IRunCommandInputParameter]@{name='secret2';value='secret2value'})
#  
#  Set-AzVMRunCommand -ResourceGroupName MyRG0 -VMName MyVMEE -RunCommandName MyRunCommand -Location EastUS2EUAP -SourceScriptUri <SourceScriptUri> -Parameter $PublicParametersArray -ProtectedParameter $ProtectedParametersArray

    - name: WIP Deploy
      shell: pwsh
      run: |
        $storageAccountName = "dtekdiscterraformsa"
        $storageContainerName = "publicreleases"
        $resource_group_name = "rg-ek"
        $vm_name = "mv-myvm"
        $key_vault_name = "dev-kv-ek-discord"
        $subscription = ((az account list | ConvertFrom-Json) | WHERE isDefault -eq $true).id
        $tenant = ((az account list | ConvertFrom-Json) | WHERE isDefault -eq $true).tenantId
        $deployStorageUrl="https://${storageAccountName}.blob.core.windows.net/${$storageContainerName}/"
        $targetFileName = "./DockerImage-${{ github.sha }}.tar"
        az vm run-command invoke `
          --resource-group $resource_group_name `
          --name $vm_name `
          --command-id "SetupVm" `
          --scripts "./.github/workflows/Deploy.sh >> Deploy.log" `
          --parameters $deployStorageUrl `
                       $targetFileName `
                       ${{ steps.myGetSecretAction.outputs.Discord__Token }} `
                       ${{ steps.myGetSecretAction.outputs.Notion__Token }}

    - name: Azure Logout (Relevant on Self Hosted Runners)
      if: always()
      run: az logout
